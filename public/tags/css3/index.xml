<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css3 on Hugo Cactus Theme</title>
    <link>http://localhost:1313/blog/tags/css3/</link>
    <description>Recent content in Css3 on Hugo Cactus Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Jul 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/tags/css3/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My Timer Web App</title>
      <link>http://localhost:1313/blog/2013/07/my-timer-web-app/</link>
      <pubDate>Thu, 18 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/07/my-timer-web-app/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/blog/img/2013/07/Clock-Promo-Med.jpg&#34; alt=&#34;Hero Image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I spent the weekend cooking up a &lt;a href=&#34;https://chrome.google.com/webstore/detail/timer/keajpdeigjicancnhaknebefgekooiof?hl=en-US&#34;&gt;web app&lt;/a&gt;. It&amp;#8217;s fairly simple. Three files serves up everything I need for a simple timer (a few more added so it could be published as a packaged app in the Chrome Web Store). I feel that I have followed the MVC design intent fairly well with a HTML file (for content organization), a CSS file (for beautification and some animation) and a Javascript file to handle the timer functionality. I learned quite a bit and the saying that I&amp;#8217;m used to at my day job still applies: nothing is rarely ever as simple as it seems. Let me explain. I had to figure out and overcome some default behaviors for styling as well as how to implement my own timing function. I&amp;#8217;m sure there is a library somewhere, but no better way to learn than to implement it yourself. I did find some great resources, which will be posted at the bottom.&lt;/p&gt;

&lt;h2 id=&#34;html:645367c7fbc3bf2fd8812011329bcb2c&#34;&gt;HTML&lt;/h2&gt;

&lt;p&gt;The markup is short and sweet. Keep in mind that all of the imagery is pure HTML and CSS; no images were uploaded. I basically set a bunch of &lt;code&gt;div&lt;/code&gt; elements up to arrange the second hand, the clock face and the control labels.&lt;/p&gt;

&lt;h2 id=&#34;css:645367c7fbc3bf2fd8812011329bcb2c&#34;&gt;CSS&lt;/h2&gt;

&lt;p&gt;This was fun. I&amp;#8217;ve used the &lt;code&gt;transition&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt; properties before, but combining this with &lt;code&gt;keyframes&lt;/code&gt; opens up interesting animation possibilities.&lt;/p&gt;

&lt;p&gt;To animate the hand, a JQuery selector adds this class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.animation {
  animation: orbit 60s steps(360) infinite;
  -webkit-animation: orbit 60s steps(360) infinite;
  animation-duration: 60s;
  -webkit-animation-duration: 60s;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I created an animation property called orbit. I directly prescribed the animation conditions at 0, 50 and 100% of the animation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@-webkit-keyframes orbit {
  0% {
    -webkit-transform: rotate(180deg);
    -webkit-transform-origin:top;
    transform: rotate(180deg);
    transform-origin:top;
  }
  50% {
    -webkit-transform: rotate(360deg);
    -webkit-transform-origin:top;
    transform: rotate(360deg);
    transform-origin:top;
  }
  100% {
    -webkit-transform: rotate(540deg);
    -webkit-transform-origin:top;
    transform: rotate(540deg);
    transform-origin:top;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;javascript-jquery:645367c7fbc3bf2fd8812011329bcb2c&#34;&gt;Javascript (JQuery)&lt;/h2&gt;

&lt;p&gt;I used JQuery to speed up development time and let me focus on the fun stuff: the timing! Since calculating times can be a bit tricky since I want the screen to continually update the elapsed time, since you know, I&amp;#8217;m making a timer application! I accomplished this with the built-in &lt;code&gt;setInterval()&lt;/code&gt; function. I feel that it is called often enough for a simple timer app (10 times / second). The interesting part on how the timing works is below. Note: Some variables were defined outside of the scope shown below. The main takeaway was how to deal with pausing and resuming the timer: a global variable &lt;code&gt;$prevTime&lt;/code&gt; was used to store the total elapsed time, which was added to the current timer. Note: On the output, there should be a &lt;code&gt;p&lt;/code&gt; wrapped around the &lt;code&gt;formatTime($totalTime)&lt;/code&gt; call&amp;#8230; something strange with WordPress&amp;#8217; text editor removing these.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$(&amp;quot;#start&amp;quot;).click(function () {

if(!$running){
$running = true; // Ensure that we can&#39;t start a 2nd concurrent timer

$start = new Date().getTime();

$doTime = window.setInterval(function() {clock($prevTime);},100);


// Run this function on setInterval to continuously update
// the time shown on the page.


function clock($p) {
$prevTime = $p; // pass in the previous time
$time = (new Date().getTime() - $start); // start calculating

$time = ($time / 100) / 10;
$time += parseFloat($prevTime); // add previously elapsed time

$totalTime = ($time).toFixed(2); // set to 2 decimals
$(&amp;quot;#time&amp;quot;).html(&amp;quot;&amp;lt;span&amp;gt;&amp;quot; + formatTime($totalTime) + &amp;quot;&amp;lt;/span&amp;gt;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I implemented a simple version of a &lt;code&gt;printf&lt;/code&gt;-like function for the time format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function formatTime($tIn) {
var $hr, $min, $sec;
var $t = $tIn;
var $out = &amp;quot;&amp;quot;;
$hr = Math.floor($t / 3600); // hold the hours
$t -= $hr * 3600; // update the time var
$min = Math.floor($t / 60); // hold the minutes
$t -= $min * 60; // update the time var
$sec = $t.toFixed(2); // assign the seconds


// Some basic formatting for the output.
// Note this is a string and is not the
// number used for any time calculations.

$out = $hr + &amp;quot;:&amp;quot; + $min + &amp;quot;:&amp;quot; + $sec;
return $out;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is hosted on my &lt;a title=&#34;Github&#34; href=&#34;https://github.com/loganwedwards/HTML-Timer&#34; target=&#34;_blank&#34;&gt;Github account&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>